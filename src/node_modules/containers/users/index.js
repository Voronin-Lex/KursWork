import React, {Component} from 'react';
import {connect} from 'react-redux'
import {bindActionCreators} from 'redux';
import {Link} from "react-router";
import {
    removeUser,
    changeUserPassword,
    addUser
} from 'actions'


class UsersPage extends Component {
    constructor(props) {
        super(props);
        this.handleChange = this.handleChange.bind(this);
        this.handlePasswordChange = this.handlePasswordChange.bind(this);
        this.handleNewUserSubmit = this.handleNewUserSubmit.bind(this);
        let initialState = {username: '', password: ''};
        this.state = {
            credentials: initialState,
            newPassword: '',
            displayedUsers: [],
        };
        window.location.assign("?#");
    }


    componentWillMount (){
        console.log("users", this.props.users);
        this.setState.bind(this)({
            displayedUsers: this.props.users
        });
    }
    //
    // componentWillReceiveProps (){
    //     console.log("users receive props", this.props.users);
    //     this.setState.bind(this)({
    //         displayedUsers: this.props.users
    //     });
    // }
    componentWillReceiveProps(nextProps) {
        // You don't have to do this check first, but it can help prevent an unneeded render
        if (nextProps.users !== this.state.displayedUsers) {
            this.setState({displayedUsers: nextProps.users});
        }
    }

    handleChange(event) {
        let id = event.target.id;
        let newState = Object.assign({}, this.state.credentials);
        newState[id] = event.target.value;
        this.setState({credentials: newState});
    }

    handlePasswordChange(event) {
        event.preventDefault();
        let id = event.target.id;
        let newState;
        newState = event.target.value;
        this.setState({newPassword: newState});
        if (event.toLocaleString())
            setTimeout(() => window.location.assign("#/"), 1000);
    }

    handleSearch(event) {
        let searchQuery = event.target.value.toLowerCase();
        console.log("searchQuery = ", searchQuery);
        let displayedUsers = this.props.users.filter(function (el) {
            let searchValue = el.username.toLowerCase();
            return searchValue.indexOf(searchQuery) !== -1;
        });
        console.log("displayedUsers = ", displayedUsers);
        this.setState.bind(this)({
            displayedUsers: displayedUsers
        });
    }


    handleNewUserSubmit(event) {
        event.preventDefault();
        let username = event.target.username.value;
        let password = event.target.password.value;
        console.log("username =", username);
        if(this.isExist(username))
            alert("This contact already exist");
        else
            this.props.addUser(username, password);

        setTimeout(() => window.location.assign("#/"), 1000);
    }

    isExist(newName){
        console.log("in isExist");
        for(let i=0; i< this.props.users.length; i++){
            if(newName.toLowerCase() === this.props.users[i].username.toLowerCase())
                return true;
        }
        return false;
    }

    renderUser(user, index){
        const {removeUser} = this.props;
        const {changeUserPassword} = this.props;
        return (
            <form onSubmit={(event) => {
                changeUserPassword(user.id, this.state.newPassword);
                event.target.password.value = '';
            }}>
                <tr key={index}>
                    <td className="user" width="100">
                        <div className="user-info">
                            <div className="user-name"> {user.username} </div>
                        </div>
                    </td>
                    <td width="150">
                       Пароль: {user.password}
                    </td>
                    <td width="300"> Новый пароль:
                        <input type="text" placeholder="Password..." id = "password" required="true"
                               onChange={(event) => this.handlePasswordChange(event)}
                        />
                    </td>
                    <td width="20">
                        <button type="submit">  Подтвердить</button>
                    </td>
                    <td>
                        <span
                            className='delete-cart'
                            onClick={() => removeUser(user.id)}
                        />
                    </td>
                </tr>
            </form>
        )
    }

    render(){
        const users = this.state.displayedUsers;
        console.log(users);
        return (
            <div className="users">
                <input type="text" placeholder="Search..." className="search-field"
                       onChange={(event) => this.handleSearch(event)}/>
                <div className='table-responsive'>
                    <table className='table-bordered table-striped table-condensed cf'>
                        <tbody>
                            {users.map((user, index) => this.renderUser(user, index))}
                        </tbody>
                    </table>
                </div>

                <br/>
                <br/>
                {/*<Link*/}
                    {/*to={`/add_user`}*/}
                    {/*className='btn btn-default'*/}
                {/*>*/}
                    {/*Добавить нового пользователя*/}
                {/*</Link>*/}
                <div>
                    {this.renderNewUserMenu()}
                </div>

            </div>
        );
    }


    renderNewUserMenu() {
        const {addUser} = this.props;
        return (
            <form className='authForm' onSubmit={this.handleNewUserSubmit}>
                <div className='form-group'>
                    <label htmlFor='login'>Login</label>
                    <input type='login' className='form-control'
                           name='login' placeholder="username"
                           value={this.state.credentials.username}
                           id = 'username'
                           onChange={this.handleChange}/>
                </div>
                <div className='form-group'>
                    <label htmlFor='password'>Password</label>
                    <input type='password' className='form-control'
                           name='password' placeholder="password"
                           value={this.state.credentials.password}
                           id = 'password'
                           onChange={this.handleChange}/>
                </div>
                <button type='submit' className='btn btn-primary'>
                    Добавить нового пользователя
                </button>
            </form>
        )
    }
}




function mapStateToProps(state){
    return {
        users: state.users
    }
}

// const mapDispatchToProps = {
//     removeUser,
//     changeUserPassword,
//     addUser
// };

function mapDispatchToProps(dispatch) {
    return bindActionCreators({
        removeUser: removeUser,
        changeUserPassword: changeUserPassword,
        addUser: addUser
    }, dispatch);
}

export default connect(mapStateToProps, mapDispatchToProps)(UsersPage)